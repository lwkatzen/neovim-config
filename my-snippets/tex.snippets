# used to define contexts
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

endglobal

# display today's date
snippet today "Date"
`date +%F`
endsnippet

# emphasize command
snippet em "emphasize" w
\emph{$1}$0
endsnippet

# bold command
snippet bf "bold" wA
\textbf{$1}$0
endsnippet

# begin block at start of line
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# begin theorem environment
snippet fthm "begin theorem environment" bA
\begin{$1}[$2]\label{$3}
	$0
\end{$1}
endsnippet

# begin theorem environment
snippet thm "begin theorem environment" bA
\begin{$1}\label{$2}
	$3
\end{$1}$0
endsnippet

snippet defn "begin theorem environment" bA
\begin{defn}\label{defn:$1}
	$0
\end{defn}
endsnippet

# begin enumerate environment
snippet enum "begin enumerate environment" bA
\begin{enumerate}[$1]
	$0
\end{enumerate}
endsnippet

# begin itemize environment
snippet itemize "begin enumerate environment" bA
\begin{itemize}
	$0
\end{itemize}
endsnippet

# inline display math
# attempt to be smart adds unwanted spaces when multiple $ $ used in one line
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = '' # replace with ' ' to return to original
else:
    snip.rv = ''
`$2
endsnippet

# displayed math
snippet dm "Math" wA
\begin{align*}
	$1
\end{align*}$0
endsnippet

# displayed math
snippet eqn "Numbered equation" bA
\begin{equation}\label{eqn:$1}
	$2
\end{equation}$0
endsnippet

# snippet for a matrix
context "math()"
snippet mtx "Matrix" wA
\begin{pmatrix}	$1 \end{pmatrix}$0
endsnippet

# snippet for making an array environment quickly
snippet array "Array environment" wA
\\begin{array}{$1}
	$2
\\end{array}$0
endsnippet

# subscript 1 digit
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# subscript 2 digits
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# subscript general -- press tab to encase in {}
snippet _ "subscript" i
_{$1}$0
endsnippet

# superscripts
snippet td "superscript" iA
^{$1}$0
endsnippet

# inner product snippet
context "math()"
snippet inp "inner product<-,->" iA
\\langle $1 \\rangle$0
endsnippet

# angle bracket snippet with \left \right
context "math()"
 priority 1000
snippet lang "\left\langle ... \right\rangle" iA
\\left\\langle $1 \\right\\rangle$0
endsnippet

# angle bracket snippet
context "math()"
priority 900
snippet ang "\langle ... \rangle" iA
\\langle $1 \\rangle$0
endsnippet

# \left(...\right)
context "math()"
snippet par "\left(...\right)" i
\\left($1\\right)$0
endsnippet

# { ... } curly brackets combo in math mode with \left ... \right
context "math()"
priority 1000
snippet lcbr "\{ ... \}" iA
\\left\\{$1\\right\\} $0
endsnippet

# { ... } curly brackets combo in math mode
priority 900
context "math()"
snippet cbr "\{...\}" iA
\\{$1\\}$0
endsnippet

# text in math mode
context "math()"
snippet text "\text{...}" iA
\\text{$1}$0
endsnippet

# basic fraction
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# advanced fraction with regex
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv  = match.group(1)`}{$1}$0
endsnippet

# advanced fraction with parentheses matching
priority 1000
snippet '^.*\)/' "() Fraction" wr
`!p
stripped  = match.string[:-1]
depth  = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i +1:-1] + "}"
`{$1}$0
endsnippet

# fraction using selected text
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet
