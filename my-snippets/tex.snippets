# display today's date
snippet today "Date"
`date +%F`
endsnippet

# begin block at start of line
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# inline display math
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# displayed math
snippet dm "Math" wA
\[
$1
\] $0
endsnippet

# subscript 1 digit
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# subscript 2 digits
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# superscripts
snippet td "superscript" iA
^{$1}$0
endsnippet

# basic fraction
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# advanced fraction with regex
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# advanced fraction with parentheses matching
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# fraction using selected text
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet
